{"version":3,"sources":["Homepage.js","HighScore.js","questions.js","Quiz.js","App.js","serviceWorker.js","index.js"],"names":["Homepage","Menu","Item","name","onClick","props","history","push","React","Component","HighScore","state","isLoading","scores","submitNewScore","urlParams","URLSearchParams","window","location","search","get","prompt","axios","post","score","Number","time","then","href","setState","data","this","src","map","key","_id","question","choices","answer","App","currentQuestionIndex","answeredQuestionCount","handleClick","event","chosenAnswer","target","value","correctAnswerIndex","questions","length","timer","setInterval","clearInterval","currentQuestion","Container","Grid","columns","Row","Column","Message","header","choice","Button","exact","path","component","Quiz","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c5b26f61.chunk.js","sourcesContent":["import React from 'react';\nimport { Menu } from 'semantic-ui-react';\n\nclass Homepage extends React.Component {\n    render() {\n        return (\n            <Menu>\n                <Menu.Item\n                name='geoQuiz'\n                onClick={() => {\n                    this.props.history.push('/quiz');\n                }}\n                >\n            Geography Quiz\n                </Menu.Item>\n            </Menu>\n        );\n    }\n}\n\nexport default Homepage;\n","import React from 'react';\nimport axios from 'axios';\n\nclass HighScore extends React.Component {\n    state = {\n        isLoading: true,\n        scores: []\n    }\n\n    componentDidMount() {\n        axios.get('/api/scores')\n            .then(scores => {\n                this.setState({\n                    isLoading: false,\n                    scores: scores.data\n                })\n            })\n    }\n\n    componentDidUpdate() {\n        if (!this.state.isLoading) {\n            this.submitNewScore();\n        }\n    }\n\n    submitNewScore = () => {\n        const urlParams = new URLSearchParams(window.location.search);\n\n        if(urlParams.get('score') && urlParams.get('time')) {\n            const name = prompt('Enter your name');\n\n            axios.post('/api/scores', {\n                name,\n                score: Number(urlParams.get('score')),\n                time: Number(urlParams.get('time'))\n            })\n                .then(() => {\n                    window.location.href = '/';\n                });\n        }\n    }\n\n    render() {\n        if (this.state.isLoading) {\n            return <img src=\"https://i.pinimg.com/originals/f6/65/6a/f6656aa6fdb6b8f905dea0bcc2d71dd8.gif\" />\n        }\n\n        return (\n            <>\n            {this.state.scores.map(score => (\n                <div key={score._id}>\n                    <p>Name: {score.name}</p>\n                    <p>Score: {score.score}</p>\n                </div>\n            ))}\n            </>\n        );\n\n    }\n}\n\nexport default HighScore;\n","export default [\n    {\n        question: 'What is the capitol of California',\n        choices: ['Sacremento', 'Austin', 'Seattle', 'Washington DC'],\n        answer: 0\n    },\n    {\n        question: 'What is the capitol of the USA',\n        choices: ['Sacremento', 'Austin', 'Seattle', 'Washington DC'],\n        answer: 3\n    },\n    {\n        question: 'In which ocean is the island nation of Mauritius?',\n        choices: ['Pacific', 'Atlantic', 'Artic', 'Indian'],\n        answer: 3\n    },\n    {\n        question: 'On what continent is Saudi Arabia located?',\n        choices: ['Africa', 'Asia', 'North America', 'Europe'],\n        answer: 2\n    },\n    {\n        question: 'Which state in the USA is a cluster of islands?',\n        choices: ['Alaska', 'Hawaii', 'Guam', 'Midway'],\n        answer: 1\n    },\n    {\n        question: 'What is the capitol of Sweden?',\n        choices: ['Sacremento', 'Austin', 'Stockholm', 'Gothenburg'],\n        answer: 0\n    },\n    {\n        question: 'What is the capitol of Spain?',\n        choices: ['Berlin', 'Madrid', 'Barcelona', 'Nice'],\n        answer: 1\n    },\n    {\n        question: 'What is the capitol of Norway',\n        choices: ['Stockholm', 'Madrid', 'Seattle', 'Oslo'],\n        answer: 3\n    },\n    {\n        question: 'What is the capitol of New York',\n        choices: ['NYC', 'Albany', 'Rockfeld', 'Richmond'],\n        answer: 1\n    }\n    // {\n    //     question: 'What is used to style webpages',\n    //     choices: ['Python', 'CSS', 'HTML', 'Javascript'],\n    //     answer: 1\n    // }\n\n];\n","import React from 'react';\nimport { Container, Grid, Message, Button } from 'semantic-ui-react';\nimport HighScores from './HighScore';\nimport questions from './questions';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    currentQuestionIndex: 0,\n    answeredQuestionCount: 0,\n    score: 0,\n    time: 90\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      this.setState({\n        time: this.state.time - 1,\n      })\n    }, 1000);\n  }\n\n  componentDidUpdate() {\n    if (questions.length === this.state.answeredQuestionCount || this.state.time === 0) {\n      // end the quiz\n      this.props.history.push('/highscores?score=' + this.state.score + '&time=' + this.state.time);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  handleClick = event => {\n    const chosenAnswer = event.target.value;\n    const correctAnswerIndex = questions[this.state.currentQuestionIndex].answer;\n\n    // if answer is correct\n    if (chosenAnswer === questions[this.state.currentQuestionIndex].choices[correctAnswerIndex]) {\n      this.setState({\n        score: this.state.score + 1,\n      });\n    }\n\n    if (questions.length - 1 !== this.state.currentQuestionIndex) {\n      this.setState({\n        currentQuestionIndex: this.state.currentQuestionIndex + 1,\n      });\n    }\n\n    this.setState({\n      answeredQuestionCount: this.state.answeredQuestionCount + 1\n    });\n  }\n\n  render() {\n    const currentQuestion = questions[this.state.currentQuestionIndex];\n\n    return (\n      <Container>\n        <Grid columns={2}>\n          <Grid.Row>\n            <Grid.Column>\n              <p>Time: {this.state.time}</p>\n              <p>Score: {this.state.score}</p>\n            </Grid.Column>\n            <Grid.Column>\n              <HighScores />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n        \n        \n        <Message header={currentQuestion.question} />\n        {currentQuestion.choices.map(choice => (\n          <Button key={choice} value={choice} onClick={this.handleClick}>{choice}</Button>\n        ))}\n      </Container>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport Homepage from './Homepage';\nimport Quiz from './Quiz';\nimport HighScore from './HighScore';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <BrowserRouter>\n                <Switch>\n                    <Route exact path=\"/\" component={Homepage} />\n                    <Route exact path=\"/highscores\" component={HighScore} />\n                    <Route exact path=\"/quiz\" component={Quiz} />\n                </Switch>\n            </BrowserRouter>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}